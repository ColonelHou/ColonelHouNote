字符串  单引号, 双引号, 三引号是多行字符串="fdaf \ 换到下一行"
\'斜杠来做转义
变量使用 不需要声明或定义数据类型
分号表示一个逻辑行/语句的结束  可加(多条语句写一行的话就要加)可不加
-----------------缩进
空白在Python中是重要的, 错误的缩进会引发错误
不要混合使用制表符和空格来缩进，因为这在跨越不同的平台的时候，无法正常工作,我 强
烈建议 你在每个缩进层次使用 单个制表符 或 两个或四个空格 
在Python中没有switch语句
len('abc')取长度
print 'abc' * 8
字符串可以与数字相乘
----------------global
局部改变全局变量生效  在局部中使用global指定变量
----------------命令行调用传进来的参数获取
 sys.argv
----------------模块============================
import sys，os，time导入模块
from sys import argv只是使用sys模块下的argv变量
创建自己的模块
文件名为模块名, 模块名.来使用模块的成员
打印模块定义的名称列表 dir(sys)会打印出模块中定义的函数与变量
__name__打印出来的是模块名, 如果是其它模块调用的话就打印模块名称, 是模块本身调用的话就打印'__main__':
-------------------—【列表】、元组和字典---内建的数据结构=====================
help(mymodule)help(int)查看类似doc
['', '', ''] append, del
【元组】类似于二元数组
只不过元组和字符串一样是 不可变的 即你不能修改元组。
zoo = ('', '', '')new_zoo = ('', '', zoo)
使用元组输出
age = 22
name = 'Swaroop'
print '%s is %d years old' % (name, age) # Swaroop is 22 years old %s表示字符串  %d表示整数
【字典】
ab = { '' : '', '' : '', '' : '', '' : ''}
添加ab['myadd'] = 'myVal'
del ab['myadd']
----------------------序列=================================
列表、元组和字符串都是序列
序列的两个主要特点是  索引操作符  和  切片操作符
list[1:3] list[-1]#倒着过来索引  list[:]所有 list[2:]2后面的  注意下标以0开始
---------------------引用====================================
你创建一个对象并给它赋一个变量的时候，这个变量仅仅 引用 那个对象
mylist = shoplist #mylist是引用, 删除元素的话都会删除
mylist = shoplist[:]  #删除那个列表的元素不影响另一个
---------------------字符串===========================
name = 'Swaroop' 
e.startswith('Swa'):   if 'a' in name: name.find('war') 
----------------头============================
#/usr/bin/env python
#-*- coding: utf-8 -*-
----------------面向对象编程===========================================
当某个对象对类的变量做了改动的时候，这个改动会反映到所有其他的实例上。
对象的变量 由类的每个对象/实例拥有。因此每个对象有自己对这个域的一份拷贝，即它们不是共享的
class Stu:
    '''represents a stu'''
    number = 0
    def __init__(self, name):
        '''init the stu's data'''
        self.name = name
    def __del__(self):
        '''I am dying.'''
    def sayHi(self):
        '''Greeting by the person'''
    def howMany(self):
        '''Prints the current population.'''

st = Stu('Tom')
st.sayHi()
st.howMany()
print st.__doc__
print st.sayHi.__doc__
Python中所有的类成员（包括数据成员）都是 公共的 ，所有的方法都是 有效的
双下划线命名是私有的
---------------------继承========================================
父(子), __init__中调用父.__init__并传参进去
----------------文件操作============================================
f = file('pythonFile.txt', 'a')
#追加写文件
#output = open('data', 'w+')
f.write(str)
f.close()
----------------异常处理机制====================================
try:
except EOFError:
except ShortInputException, x:
finally:
-------------标准库=============================================
sys模块块包含系统对应的功能
os模块包含普遍的操作系统功能
------------------- 一些特殊的方法=============================
名称 								说明
__init__(self,...) 		这个方法在新建对象恰好要被返回使用之前被调用。
__del__(self) 			恰好在对象要被删除之前调用。
__str__(self) 			在我们对对象使用print语句或是使用str()的时候调用。
__lt__(self,other) 		当使用 小于 运算符（<）的时候调用。类似地，对于所有的运算符
（+，>等等）				都有特殊的方法。
__getitem__(self,key) 	使用x[key]索引操作符的时候调用。
__len__(self) 			对序列对象使用内建的len()函数的时候调用。
单语句 if flag: print 'Yes
列表*2的新列表
listone = [2, 3, 4]
listtwo = [2*i for i in listone if i > 2]  列表推导
print listtwo
-------------------在函数中接收元组和列表/字典==================
def powersum(power, *args):接收元组与列表
def findad(username, **args): 接收字典
http://blog.csdn.net/delphiwcdj/article/details/5746560
-------------------Python中的lambda形式（lambda语句被用来创建新的函数对象）=====就相当于一个函数====================
函数在运行时创建新的函数对象，并且返回它
lambda语句用来创建函数对象。
本质上，lambda需要一个参数，后面仅跟单个表达式作为函数体，而表达式
的值被这个新建的函数返回。
理解：返回的是一个函数, 格式传入参数:返回函数的表达式
--------------reduce内建函数=========聚合==========================
def myadd(x, y): return x + y
sum = reduce(myadd, (1,2,3,4,5,6))
print sum
/////sum=reduce((lambda x,y:x+y),(1,2,3,4,5,6,7), 20)
20+1+2+3+4.....10
顺序很重要
--------------range()函数=======================
range(1,5) #两个参数的，从1到5
range(1,5,2) #三个参数的，从1到5，间隔数字为2，所以显示奇数
range(5) #一个参数的，默认start是从0开始,end是5
先对集合中的第1，2个数据进行操作，得到的结果再与第三个数据用func()函数运算，最后得到一个结果
---------------map==============各元素分别处理==========================
def addVal(x): return 10 + x
map(addVal, list1) 
//相当于上面[add100(i) for i in hh]
map(f, iterable)基本上等于：[f(x) for x in iterable](列表指导)注意这里不适合下面的使用
-------------------------------------------
print map(lambda a, b, c : a * 100 + b * 10 + c, list1,list2,list3)
相当于如下(在每个list中，取出了下标相同的元素，执行了abc()。)：
ef abc(a, b, c):
    return a * 100 + b * 10 + c
list1 = [2, 3, 4]
list2 = [2, 3, 4]
list3 = [2, 3, 4]
print map(abc, list1, list2, list3)
//print map(None, list1, list2, list3) [(2, 2, 2), (3, 3, 3), (4, 4, 4)]
----------------------filter内置函数=======传进来值是否满足要求======================
把sequence中的值逐个当参数传给function，如果function(x)的返回值是True，就把x加到filter的返回值里面。
来说filter的返回值是list
理解：就是说满足函数里的要求就返回此值
print filter(lambda x : x % 2 != 0, range(1, 5))
print filter(lambda s : len(s) != 0, 'hello')
---------------------------子类实现了父类delegate中所期望的action方法-========================
class Super:  
    def delegate(self):  
        self.action()  
          
class Provider(Super):  
    def action(self):  
        print 'in Provider.action'  
          
x = Provider()  
x.delegate()  
in Provider.action  
---------------------exec语句用来执行储存在字符串或文件中的Python语句=====================
---------------------eval语句用来计算存储在字符串中的有效Python表达式=====================
exec 'print "Hello World"'
eval('2*3')
-----------------------assert语句============================================
assert语句用来声明某个条件是真的。
repr函数用来取得对象的规范字符串表示
-------------------------------zip()内建函数============================================
>>> a = [1,2,3]
>>> b = [4,5,6]
>>> c = [4,5,6,7,8]
>>> zipped = zip(a,b)
[(1, 4), (2, 5), (3, 6)]
>>> zip(*zipped)
[(1, 2, 3), (4, 5, 6)]