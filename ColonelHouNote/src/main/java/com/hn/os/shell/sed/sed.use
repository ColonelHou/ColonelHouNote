--------------命令行模式----------
sed 's/old/new/' file
sed -e 's/old/new/' -e 's/old/new/' file
sed -i替换原文件
sed 's/aaa/bbb/4g' 替换第四个以后的
sed '/^$/d' 删除空行
sed 's/\w\+/[&]/g' 匹配一个单词\w\+， 替换成[单词]
--------------执行脚本-----------#加-n只会打印替换中/p的内容 
sed -n -f sed.script file > another.file
sed.script:
s/ MA/; Massachusetts/p
s/ VA/,Pennsyl/
-------------------------------
sed '2d'或者'2,$d' file 删除
sed '/test/'d file    删除example文件所有包含test的行。
---------------替换--------------
$ sed 's/test/mytest/g' file
在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。

$ sed -n 's/^test/mytest/p' file
(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，
就打印它。

sed 's/^192.168.0.1/&localhost/' file
&符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，
变成192.168.0.1localhost。

sed -n 's//(love/)able//1rs/p' file
love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。

$ sed 's#10#100#g' file
不论什么字符，紧跟着s命令的都被认为是新的分隔符，
所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。

选定行的范围：逗号 
$ sed -n '/test/,/check/p' example-----所有在模板test和check所确定的范围内的行都被打印。

$ sed -n '5,/^test/p' example-----打印从第五行开始到第一个包含以test开始的行之间的所有行。

$ sed '/test/,/check/s/$/sed test/' example-----对于模板test和west之间的行，每行的末尾用字符串sed test替换。

多点编辑：e命令 
$ sed -e '1,5d' -e 's/test/check/' example-----(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。

$ sed --expression='s/test/check/' --expression='/love/d' example-----一个比-e更好的命令是--expression。它能给sed表达式赋值。

