类定义很有可能在不停的人为更新(比如JDK1.1到JDK1.2中HashTable的改变)。那么以前序列化的旧类对象很可能不能再反序列化成为新类对象。这就是序列化的兼容性问题，严格意义上来说改变类中除static 和transient以外的所有部分都会造成兼容性问题。而JDK采用了一种stream unique identifier (SUID) 来识别兼容性。SUID是通过复杂的函数来计算的类名，接口名，方法和数据域的 一个64位 hash值。而这个值存储在类中的静态域内：
                               private static final long serialVersionUID = 3487495895819393L
只要稍微改动类的定义，这个类的SUID就会发生变化，我们通过下面的程序来看看：
//修改前的Employee
class Employee implements Serializable{
	private String name;
	Employee(String n){
		this.name=n;
	}
	public String getName(){
		return this.name;
	}
}
//测试，打印SUID=5135178525467874279L
long serialVersionUID=ObjectStreamClass.lookup(Class.forName("Employee")).getSerialVersionUID();
System.out.println(serialVersionUID);

//修改后的Employee
class Employee implements Serializable{
	private String name1; //注意，这里略微改动一下数据域的名字
	Employee(String n){
		this.name1=n;
	}
	public String getName(){
		return this.name1;
	}
}
//测试，打印SUID=-2226350316230217613L
long serialVersionUID=ObjectStreamClass.lookup(Class.forName("Employee")).getSerialVersionUID();
System.out.println(serialVersionUID);
 两次测试的SUID都不一样，不过你可以试试如果name域是static或transient声明的，那么改变这个域名是不会影响SUID的。
     很显然，JVM正是通过检测新旧类SUID的不同，来检测出序列化对象与反序列化对象的不兼容。抛出 java.io.InvalidClassException: Employee; local class incompatible:
     很多时候，类定义的改变势在必行，但又不希望出现序列化的不兼容性。我们就可以通过在类中显示的定义serialVersionUID，并赋予一个明确的long值即可。这样会逃过JVM的默认兼容性检查。但是如果数据域名的改变会导致反序列化后，改变的数据域只能得到默认的null或者0或者false值。