/**
 * 
 */
/**
 * @author Colonel.Hou
 * 一个类史负责一项职责
 * 
 * 问题由来：类T1负责两个不同的职责（T1、T2）， 需要发生改变变化T1时有可能导致原来运行正常的职责T2不能正常运行
 * 解决方案：搞两个类分别负责T1与T2的类，使得在修改时互不影响
 * 
 * 修改一个功能导致其它的功能故障
 * 
 * 职责扩散：即使很有经验的程序员写出的程序也会违背这一原则，因为某种原因， 职责会化为了粒度更小的职责
 *       职责扩散到我们无法控制的程度之前， 立刻对代码进行重构
 * 
 * 优点：
 *     1.降低类的复杂度， 一个类只负责一项职责
 *     2.提高类的可读性与系统的可维护性
 *     3.变更引起的风险底
 * ===========================================================================
 * 只要是模块化的程序设计， 都适用单一职责
 *    
 * EG：打游戏为例
 *     方案一：有一天根据人的年龄区分出类型   每种游戏拆分了独立的类会开销很大
 *     方案二：修改方法根据年龄段来做判断， 违反了方法级别的单一职责
 *     方案三：不同年龄做的人分别写一个方法，根据不同年龄段的人来调用不同到方法；这样做是违反了类级别的单一职责
 *
 */
package com.hn.java.六大法则.单一职责;